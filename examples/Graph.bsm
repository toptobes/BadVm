type GraphLimits =
 | word maxGraphSize
 | word maxNumEdges

export type Graph =
 | word size
 & GraphLimits

export type Node =
 | addr data
 | addr edges

export type Edge
 | word weight
 | addr node

imm word NUM_RESERVED_BYTES = 6

#=
cx -> Graph start addr
dx -> Max graph size
ex -> Max # of children
=#
export GraphNew:
    mov [cx], 0
    mov [cx], 2, dx
    mov [cx], 4, ex
    ret

#=
cx -> Graph addr
dx -> Data addr
=#
export GraphAddNode:
    mov ax, <Graph ptr cx>.size
    mov ex, <Graph ptr cx>.maxGraphSize

    cmp ax, ex
    jgt TooManyNodes

    mov ex, <Graph ptr cx>.maxNumEdges
    shl ex, 4
    mul ax, ex
    add ax, 2

    psh cx
    add cx, NUM_RESERVED_BYTES
    add cx, ax
    mov [cx], dx

    pop cx
    mov ax, <Graph ptr cx>.size
    inc ax
    mov [cx], ax

    xor ax, ax
    ret

    TooManyNodes:
        mov ax, 1
        ret
